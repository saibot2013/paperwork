(function () {
    'use strict';

    var path = document.querySelector('[src*="paperwork.min.js"]')
        .src.split('/')
        .filter(function(a) { return a !== ''; })
        .slice(2), prefix = '';

    // Suspect subfolder.
    if (path[0] !== 'js') {
        prefix = '/' + path.slice(0, path.indexOf('js')).join('/');
    }

    /**
     * Defines paperwork module and its constants.
     */
    angular.module('paperworkNotes', ['ngRoute', 'ngSanitize', 'ngAnimate', 'angularFileUpload', 'ab-base64', 'ngDraggable', 'ui.bootstrap', 'angular-loading-bar', 'hljs'])
        .constant('paperworkApi', prefix + '/api/v1')
        .constant('paperworkDbAllId', '00000000-0000-0000-0000-000000000000')
        .config(['cfpLoadingBarProvider', function(cfpLoadingBarProvider) {
            cfpLoadingBarProvider.includeSpinner = false;
        }])
        .config(["hljsServiceProvider", function (hljsServiceProvider) {
            hljsServiceProvider.setOptions({
                tabReplace: '    '
            });
        }])
    ;
}());

angular.module('paperworkNotes').config(["$routeProvider", "paperworkDbAllId", function($routeProvider, paperworkDbAllId) {
  $routeProvider
  .when('/', {
    redirectTo:'/n/' + paperworkDbAllId
  })
  .when('/n/:notebookId', {
    controller:'NotesAllController',
    templateUrl:'templates/paperworkNoteShow'
  })
  .when('/n/:notebookId/:noteId', {
    controller: 'NotesShowController',
    templateUrl:'templates/paperworkNoteShow'
  })
  .when('/n/:notebookId/:noteId/edit', {
    controller:'NotesEditController',
    templateUrl:'templates/paperworkNoteEdit'
  })
  .when('/s/:searchQuery', {
    controller:'SearchController',
    templateUrl:'templates/paperworkNoteShow'
  })
  .when('/s/:searchQuery/n/:notebookId/:noteId', {
    controller:'NotesShowController',
    templateUrl:'templates/paperworkNoteShow'
  })
  .when('/404', {
    controller:'FourOhFourController',
    templateUrl:'templates/paperwork404'
  })
  .otherwise({
    redirectTo:'/404'
  });
}]);

angular.module('paperworkNotes').filter('convertdate', function() {
  return function(value) {
    return (!value) ? '' : value.replace(/ /g, 'T');
  };
});

angular.module('paperworkNotes').controller('ConstructorController',
  ["$scope", "$rootScope", "$location", "$routeParams", "NetService", "paperworkDbAllId", function($scope, $rootScope, $location, $routeParams, NetService, paperworkDbAllId) {
    if($rootScope.initDone) {
      return;
    }
    $rootScope.initDone = true;

    // We need to close popovers, else they will hang up if the ng-view is being switched.
    $('body').on('mousedown', function(e) {
      $('[data-toggle="popover"]').each(function() {
        if(!$(this).is(e.target) && $(this).has(e.target).length === 0 && $('.popover').has(e.target).length === 0) {
          $(this).popover('hide');
        }
      });
    });

    NetService.apiGet('/i18n', function(status, data) {
      if(status == 200) {
        $rootScope.i18n = data.response;
      }
    });

    $rootScope.modal = {
      'active': false,
      'next':   []
    };

    $rootScope.$on('paperworkModalVisible', function(ev, data) {
      $rootScope.modal.active = true;
    });

    $rootScope.$on('paperworkModalHidden', function(ev, data) {
      $rootScope.modal.active = false;

      if($rootScope.modal.next.length > 0) {
        if($rootScope.modal.next[0].callback) {
          $rootScope.modal.next[0].callback();
        }
        $rootScope.modal.next.splice(0, 1);
      }
    });

    $('#modalNotebook').on('hidden.bs.modal', function(e) {
      $(this).find('input[name="title"]').parents('.form-group').removeClass('has-warning');
    });

    var $modal = $('.modal');

    $modal.on('hidden.bs.modal', function(e) {
      $rootScope.$broadcast('paperworkModalHidden', e);
    });

     $rootScope.menuItemNotebookClass = function() {
       if($rootScope.getNotebookSelectedId() != paperworkDbAllId) {
         return '';
       } else {
         return 'disabled';
       }
     };

    $rootScope.menuItemNotebookClass = function() {
      if($rootScope.getNotebookSelectedId() != 0) {
        return '';
      } else {
        return 'disabled';
      }
    };

    $rootScope.menuItemNoteClass = function(availabilityType) {
      if($rootScope.getNoteSelectedId(true) != null && typeof $rootScope.notes != "undefined" && $rootScope.notes.length > 0) {
        if(availabilityType == 'single' && $rootScope.editMultipleNotes == true) {
          return 'disabled';
        } else {
          return '';
        }
      } else {
        return 'disabled';
      }
    };

    $rootScope.getVersionSelectedId = function(asObject) {
      if(asObject === true) {
        return $rootScope.versionSelectedId;
      }
      return $rootScope.versionSelectedId.notebookId + "-" + $rootScope.versionSelectedId.noteId + "-" + $rootScope.versionSelectedId.versionId;
    };

    $rootScope.modalGeneric = function(modalId, modalData) {
      var callback = function(data) {
        $rootScope.modalMessageBox = data;
        $('#' + modalId).modal('show');
      };
      if($rootScope.modal.active === false) {
        callback(modalData);
      } else {
        $rootScope.modal.next.push({
          'id':       modalId,
          'callback': function() {
            callback(modalData);
          }
        });
      }
    };

    $rootScope.messageBox = function(messageBoxData) {
      $rootScope.modalGeneric('modalMessageBox', messageBoxData);
    };

    $rootScope.modalNotebookSelect = function(modalData) {
      $rootScope.modalGeneric('modalNotebookSelect', modalData);
    };
    
    $rootScope.modalUsersSelect = function(modalData){
      if (!('noteId' in modalData)) {
        $rootScope.modalGeneric('modalUsersNotebookSelect',modalData);
      }else{
        $rootScope.modalGeneric('modalUsersSelect',modalData);
      }
    }
    
  }]);

angular.module('paperworkNotes').controller('DefaultController',
  ["$scope", "$location", "$routeParams", "NotesService", function($scope, $location, $routeParams, NotesService) {
  }]);

angular.module('paperworkNotes').controller('FileUploadController',
  ["$scope", "$rootScope", "$location", "$routeParams", "FileUploader", "NotesService", "StatusNotifications", function($scope, $rootScope, $location, $routeParams, FileUploader, NotesService, StatusNotifications) {
    var uploader = $scope.uploader = new FileUploader({
      url: $rootScope.uploadUrl
    });

    uploader.filters.push({
      name: 'customFilter',
      fn:   function(item /*{File|FileLikeObject}*/, options) {
        return this.queue.length < 10;
      }
    });

    uploader.onWhenAddingFileFailed = function(item /*{File|FileLikeObject}*/, filter, options) {
      // console.info('onWhenAddingFileFailed', item, filter, options);
    };
    uploader.onAfterAddingFile = function(fileItem) {
      // console.info('onAfterAddingFile', fileItem);
    };
    uploader.onAfterAddingAll = function(addedFileItems) {
      // console.info('onAfterAddingAll', addedFileItems);
    };
    uploader.onBeforeUploadItem = function(item) {
      // console.info('onBeforeUploadItem', item);
    };
    uploader.onProgressItem = function(fileItem, progress) {
      // console.info('onProgressItem', fileItem, progress);
    };
    uploader.onProgressAll = function(progress) {
      // console.info('onProgressAll', progress);
    };
    uploader.onSuccessItem = function(fileItem, response, status, headers) {
      // console.info('onSuccessItem', fileItem, response, status, headers);
    };
    uploader.onErrorItem = function(fileItem, response, status, headers) {
      // console.info('onErrorItem', fileItem, response, status, headers);
      StatusNotifications.sendStatusFeedback("error", "upload_failed");
    };
    uploader.onCancelItem = function(fileItem, response, status, headers) {
      // console.info('onCancelItem', fileItem, response, status, headers);
    };
    uploader.onCompleteItem = function(fileItem, response, status, headers) {
      // console.info('onCompleteItem', fileItem, response, status, headers);
    };
    uploader.onCompleteAll = function() {
      // console.info('onCompleteAll');
      NotesService.getNoteVersionAttachments($rootScope.getNotebookSelectedId(), ($rootScope.getNoteSelectedId(true)).noteId,
        $rootScope.getVersionSelectedId(true).versionId, function(response) {
          $rootScope.fileList = response;
          uploader.clearQueue();
        });
      StatusNotifications.sendStatusFeedback("success", "file_uploaded_sucessfully");
    };

    $('#file-upload-dropzone').click(function() {
      $('#file-upload-input').click();
    });

    $scope.fileUploadDeleteFile = function(notebookId, noteId, versionId, attachmentId, isSure) {
      if(isSure != true) {
        $rootScope.messageBox({
          'title':   $rootScope.i18n.keywords.delete_attachment_question,
          'content': $rootScope.i18n.keywords.delete_attachment_message,
          'buttons': [
            {
              // We don't need an id for the dismiss button.
              // 'id': 'button-no',
              'label':     $rootScope.i18n.keywords.cancel,
              'isDismiss': true
            },
            {
              'id':    'button-yes',
              'label': $rootScope.i18n.keywords.yes,
              'class': 'btn-warning',
              'click': function() {
                return $scope.fileUploadDeleteFile(notebookId, noteId, versionId, attachmentId, true);
              }
            }
          ]
        });
      } else {
        NotesService.deleteNoteVersionAttachment(notebookId, noteId, versionId, attachmentId, function(response) {
          var fileUrl = '/api/v1/notebooks/' + notebookId + '/notes/' + noteId + '/versions/' + versionId + '/attachments/' + attachmentId + '/raw';
          var i, l = $rootScope.fileList.length;
          for(i = 0; i < l; i++) {
            if(typeof $rootScope.fileList[i] != "undefined" && typeof $rootScope.fileList[i].id != "undefined" && $rootScope.fileList[i].id == attachmentId) {
              $rootScope.fileList.splice(i, 1);
            }
          }

          $rootScope.$broadcast('deleteAttachmentLink', {'url': fileUrl});
          StatusNotifications.sendStatusFeedback("success", "file_deleted_sucessfully");
        });
      }
      return true;
      // console.log("notebookId " + notebookId + ' noteId ' + noteId + ' versionId ' + versionId + ' attachmentId ' + attachmentId);
    };

    $scope.fileUploadInsertFile = function(notebookId, noteId, versionId, attachmentId, attachment) {
      var fileUrl = '/api/v1/notebooks/' + notebookId + '/notes/' + noteId + '/versions/' + versionId + '/attachments/' + attachmentId + '/raw';
      $rootScope.$broadcast('insertAttachmentLink', {'url': fileUrl, 'filename': attachment.filename, 'mimetype': attachment.mimetype});
    };

    $scope.getFaClassFromMimetype = function(mimetype) {
      var mimematch = /(.+)\/(.+)/g.exec(mimetype);
      switch(mimematch[1]) {
        case 'image':
          return 'fa-file-image-o';
        case 'video':
          return 'fa-file-movie-o';
        case 'audio':
          return 'fa-file-audio-o';
        case 'application':
          switch(mimematch[2]) {
            case 'pdf':
              return 'fa-file-pdf-o';
            case 'zip':
              return 'fa-file-archive-o';
            default:
              return 'fa-file-o';
          }
          break;
        default:
          return 'fa-file-o';
      }
    };
  }]);

angular.module('paperworkNotes').controller('FourOhFourController',
  ["$scope", "$rootScope", "$location", "$routeParams", "NotesService", function($scope, $rootScope, $location, $routeParams, NotesService) {
    $rootScope.navbarMainMenu = true;
    $rootScope.navbarSearchForm = true;
    $rootScope.expandedNoteLayout = false;
  }]);

angular.module('paperworkNotes').directive('pwOnFinishRender', ["$timeout", function($timeout) {
  return {
    restrict: 'A',
    link:     function(scope, element, attr) {
      if(scope.$last === true) {
        $timeout(function() {
          scope.$emit('ngRepeatFinished');
        });
      }
    }
  }
}]);

angular.module('paperworkNotes').controller('MessageBoxController',
  ["$scope", "$rootScope", "$location", "$routeParams", function($scope, $rootScope, $location, $routeParams) {
    $scope.onClick = function(buttonId) {
      if(typeof buttonId == "undefined" || buttonId == null || buttonId == "") {
        return false;
      }

      var l = $rootScope.modalMessageBox.buttons.length;

      for(i = 0; i < l; i++) {
        if($rootScope.modalMessageBox.buttons[i].id == buttonId) {
          if(typeof $rootScope.modalMessageBox.buttons[i].click != "undefined") {
            if($rootScope.modalMessageBox.buttons[i].click()) {
              $('#modalMessageBox').modal('hide');
            }
            return;
          }
        }
      }
    };
  }]);

angular.module('paperworkNotes').factory('MessageBoxService',
  ["$rootScope", "$http", "NetService", function($rootScope, $http, NetService) {
    var paperworkMessageBoxFactory = {};

    return paperworkMessageBoxFactory;
  }]);

angular.module('paperworkNotes').service('NetService',
    ["$rootScope", "$http", "$location", "$window", "paperworkApi", "StatusNotifications", function ($rootScope, $http, $location, $window, paperworkApi, StatusNotifications) {
        this.apiGeneric = function (method, url, data, callback) {
            var $opts = {method: method, url: paperworkApi + url, headers: {"X-Requested-With": "XMLHttpRequest"}};
            if (typeof data != "undefined" && data != null) {
                $opts.data = data;
            }
            $http($opts).
                success(function (data, status, headers, config) {
                    if (status == 302) {
                        var header = headers();

                        if (typeof header.location != "undefined" && header.location != null && header.location != "") {
                            $location.path(header.location);

                            return false;
                        }
                    }
                    callback(status, data);
                }).
                error(function (data, status, headers, config) {
                    if (status == 401) {
                        StatusNotifications.sendStatusFeedback("error", "session_expired");
                        //$window.location.reload();
                        return false;
                    }
                    callback(status, data);
                });
        };

        this.apiGet = function (url, callback) {
            this.apiGeneric('GET', url, null, callback);
            if (window.paperworkNative.callbacks.api.get != null) {
                window.paperworkNative.callbacks.api.get(url, null);
            }
        };

        this.apiPost = function (url, data, callback) {
            this.apiGeneric('POST', url, data, callback);
            if (window.paperworkNative.callbacks.api.post != null) {
                window.paperworkNative.callbacks.api.post(url, data);
            }
        };

        this.apiPut = function (url, data, callback) {
            this.apiGeneric('PUT', url, data, callback);
            if (window.paperworkNative.callbacks.api.put != null) {
                window.paperworkNative.callbacks.api.put(url, data);
            }
        };

        this.apiDelete = function (url, callback) {
            this.apiGeneric('DELETE', url, null, callback);
            if (window.paperworkNative.callbacks.api.delete != null) {
                window.paperworkNative.callbacks.api.delete(url, null);
            }
        };
    }]);

angular.module('paperworkNotes').factory('NotebooksService',
  ["$rootScope", "$http", "NetService", "StatusNotifications", function($rootScope, $http, NetService, StatusNotifications) {
    var paperworkNotebooksServiceFactory = {};

    // paperworkNotebooksServiceFactory.selectedNotebookId = 0;

    paperworkNotebooksServiceFactory.createNotebook = function(data, callback) {
      NetService.apiPost('/notebooks', data, callback);
    };

    paperworkNotebooksServiceFactory.updateNotebook = function(notebookId, data, callback) {
      NetService.apiPut('/notebooks/' + notebookId, data, callback);
    };

    paperworkNotebooksServiceFactory.shareNotebook = function(notebookId, toUserId, toUMASK, callback) {
      NetService.apiGet('/notebooks/' + notebookId+'/share/'+toUserId+'/'+toUMASK, function(status,data){
        if (status==200) {
          if(typeof callback != "undefined") {
            callback(notebookId);
            }
          StatusNotifications.sendStatusFeedback("success", "notebook_share_success");
        }else{
          StatusNotifications.sendStatusFeedback("error", "notebook_share_fail");
        }
      });
    };

    paperworkNotebooksServiceFactory.updateTag = function(tagId, data, callback) {
      NetService.apiPut('/tags/' + tagId, data, callback);
    };

    paperworkNotebooksServiceFactory.nestTag = function(tagId, parentTagId, callback) {
      NetService.apiGet('/tags/' + tagId+ '/' + parentTagId, callback);
    };

    paperworkNotebooksServiceFactory.deleteNotebook = function(notebookId, callback) {
      NetService.apiDelete('/notebooks/' + notebookId, callback);
    };

    paperworkNotebooksServiceFactory.deleteTag = function(tagId, callback) {
      NetService.apiDelete('/tags/' + tagId, callback);
    };

    paperworkNotebooksServiceFactory.getCalendar = function(callback) {
      NetService.apiGet('/calendar', function(status, data) {
        if(status == 200) {
          callback(data.response);
        }
      });
    };

    paperworkNotebooksServiceFactory.getNotebooks = function() {
      NetService.apiGet('/notebooks', function(status, data) {
        if(status == 200) {
          $rootScope.notebooks = data.response;
        }
      });
    };

    paperworkNotebooksServiceFactory.getNotebookById = function(notebookId) {
      NetService.apiGet('/notebooks/' + notebookId, function(status, data) {
        if(status == 200) {
          $rootScope.notebook = data.response;
        }
      });
    };

    paperworkNotebooksServiceFactory.getNotebookByIdLocal = function(notebookId) {
      var i = 0, l = $rootScope.notebooks.length;
      for(i = 0; i < l; i++) {
        if($rootScope.notebooks[i].id == notebookId) {
          return $rootScope.notebooks[i];
        }
      }
      return null;
    };

    paperworkNotebooksServiceFactory.getNotebookShortcuts = function() {
      NetService.apiGet('/shortcuts', function(status, data) {
        if(status == 200) {
          $rootScope.shortcuts = data.response;
        }
      });
    };

    paperworkNotebooksServiceFactory.getShortcutByNotebookIdLocal = function(notebookId) {
      var i = 0, l = $rootScope.shortcuts.length;
      for(i = 0; i < l; i++) {
        if($rootScope.shortcuts[i].id == notebookId) {
          return $rootScope.shortcuts[i];
        }
      }
      return null;
    };

    paperworkNotebooksServiceFactory.getTags = function() {
      NetService.apiGet('/tags', function(status, data) {
        if(status == 200) {
	  tmp=[];//i store the collapsed info
	  angular.forEach($rootScope.tags,function(tag,key){
	    if(typeof(tag.collapsed)!="undefined"){
	      tmp[tag.id]=tag.collapsed;
	    }else{
	      tmp[tag.id]=false;
	    }
	  });
          $rootScope.tags = data.response;//updating the tags
	  angular.forEach($rootScope.tags, function(tag,key){
	    if(typeof(tmp[tag.id])!="undefined"){
	      tag.collapsed=tmp[tag.id];
	    }else{
	      tag.collapsed=false;
	    }
	  });
        }
      });
    };

    return paperworkNotebooksServiceFactory;
  }]);

angular.module('paperworkNotes').factory('NotesService',
  ["$rootScope", "$http", "base64", "NetService", "paperworkDbAllId", "StatusNotifications", function($rootScope, $http, base64, NetService, paperworkDbAllId, StatusNotifications) {
    var factory = {};

    // paperworkNotesServiceFactory.selectedNoteIndex = 0;

    factory.createNote = function(notebookId, data, callback) {
      NetService.apiPost('/notebooks/' + notebookId + '/notes', data, callback);
    };

     factory.updateNote = function(noteId, data, callback) {
       NetService.apiPut('/notebooks/' + paperworkDbAllId + '/notes/' + noteId, data, callback);
     };

     factory.deleteNote = function(noteId, callback) {
       NetService.apiDelete('/notebooks/' + paperworkDbAllId + '/notes/' + noteId, callback);
     };

    factory.moveNote = function(notebookId, noteId, toNotebookId, callback) {
      NetService.apiGet('/notebooks/' + notebookId + '/notes/' + noteId + '/move/' + toNotebookId, function(status, data) {
        if(status == 200) {
          // $rootScope.notes = data.response;
          if(typeof callback != "undefined") {
            callback(notebookId, noteId, toNotebookId);
          }
          StatusNotifications.sendStatusFeedback("success", "note_moved_successfully");
        }else{
          StatusNotifications.sendStatusFeedback("error", "note_move_fail");
        }
      });
    };

    factory.tagNote = function(notebookId, noteId, toTagId, callback) {
      console.log("test");
      NetService.apiGet('/notebooks/' + notebookId + '/notes/' + noteId + '/tag/' + toTagId, function(status, data) {
        if(status == 200) {
          StatusNotifications.sendStatusFeedback("success", "note_tag_success");
        }else{
          StatusNotifications.sendStatusFeedback("error", "note_tag_fail");
        }
      });
    };

    factory.shareNote = function(notebookId,noteId,toUserId,toUMASK,callback){
      NetService.apiGet('/notebooks/'+notebookId+'/notes/'+noteId+'/share/'+toUserId+'/'+toUMASK, function(status,data){
        if (status==200) {
          if(typeof callback != "undefined") {
            callback(notebookId, noteId);
            }
          StatusNotifications.sendStatusFeedback("success", "note_share_success");
        }else{
          StatusNotifications.sendStatusFeedback("error", "note_share_fail");
        }
      });
    };
    
    factory.getNotesInNotebook = function(notebookId, callback) {
      NetService.apiGet('/notebooks/' + notebookId + '/notes', function(status, data) {
        if(status == 200) {
          $rootScope.notes = data.response;
          if(typeof callback != "undefined") {
            callback();
          }
        }
      });
    };

    factory.getNotesInTag = function(tagId) {
      NetService.apiGet('/tagged/' + tagId, function(status, data) {
        if(status == 200) {
          $rootScope.notes = data.response;
        }
      });
    };

     factory.getNoteById = function(noteId, callback) {
       NetService.apiGet('/notebooks/' + paperworkDbAllId + '/notes/' + noteId, function(status, data) {
         if(status == 200) {
           $rootScope.note = data.response;
           if(typeof callback != "undefined") {
             callback(data.response);
           }
         }
       });
     };

    factory.getNotesFromSearch = function(query) {
      NetService.apiGet('/search/' + base64.encode(query), function(status, data) {
        if(status == 200) {
          $rootScope.notes = data.response;
        }
      });
    };

    factory.getNoteVersionAttachments = function(notebookId, noteId, versionId, callback) {
      NetService.apiGet('/notebooks/' + notebookId + '/notes/' + noteId + '/versions/' + versionId + '/attachments', function(status, data) {
        if(status == 200) {
          if(typeof callback != "undefined") {
            callback(data.response);
          }
        }
      });
    };

    factory.deleteNoteVersionAttachment = function(notebookId, noteId, versionId, attachmentId, callback) {
      NetService.apiDelete('/notebooks/' + notebookId + '/notes/' + noteId + '/versions/' + versionId + '/attachments/' + attachmentId, callback);
    };

    return factory;
  }]);

angular.module('paperworkNotes').controller('NotesAllController',
  ["$scope", "$rootScope", "$location", "$routeParams", "NotesService", function($scope, $rootScope, $location, $routeParams, NotesService) {
    if(typeof $routeParams == "undefined" || $routeParams == {} || typeof $routeParams.notebookId == "undefined") {
      return;

       // fixme
       // $rootScope.notebookSelectedId = 0;
     } else {
       $rootScope.notebookSelectedId = ($routeParams.notebookId);
     }
     NotesService.getNotesInNotebook($rootScope.getNotebookSelectedId(), function() {
       // $rootScope.setNoteSelectedId($rootScope.getNotebookSelectedId(), $rootScope.notes[0].id);
       if($rootScope.notes.length > 0) {
         $location.path("/n/" + $scope.notebookSelectedId + "/" + $rootScope.notes[0].id);
       }
     });

    $rootScope.editMultipleNotes = false;
    $rootScope.navbarMainMenu = true;
    $rootScope.navbarSearchForm = true;
    $rootScope.expandedNoteLayout = false;

    $rootScope.note = null;
  }]);

angular.module('paperworkNotes').controller('NotesEditController',
    ["$scope", "$rootScope", "$location", "$routeParams", "NotesService", "paperworkApi", "paperworkDbAllId", function ($scope, $rootScope, $location, $routeParams, NotesService, paperworkApi, paperworkDbAllId) {
        window.onCkeditChangeFunction = function () {
            // FIXME jQuery un angular is anti-pattern
            // Let's access our $rootScope from within jQuery (this)
            $scope.$apply(function () {
                if (CKEDITOR.instances.content.checkDirty()) {
                    $rootScope.templateNoteEdit.modified = true;
                }
            });
        };

        window.hasCkeditChangedFunction = function () {
            // Let's access our $rootScope from within jQuery (this)
            return $rootScope.templateNoteEdit.modified;
        };

        var thisController = function (notebookId, noteId, _onChangeFunction) {
            $rootScope.noteSelectedId = {'notebookId': notebookId, 'noteId': noteId};
            $rootScope.versionSelectedId = {'notebookId': notebookId, 'noteId': noteId, 'versionId': 0};
            NotesService.getNoteById(noteId);
            $rootScope.templateNoteEdit = $rootScope.getNoteByIdLocal(noteId);
            if (typeof $rootScope.templateNoteEdit == "undefined" || $rootScope.templateNoteEdit == null) {
                $rootScope.templateNoteEdit = {};
            }

            NotesService.getNoteVersionAttachments($rootScope.getNotebookSelectedId(), ($rootScope.getNoteSelectedId(true)).noteId, $rootScope.getVersionSelectedId(true).versionId,
                function (response) {
                    $rootScope.fileList = response;
                });

            if (typeof $rootScope.templateNoteEdit.tags != "undefined" && $rootScope.templateNoteEdit.tags.length > 0) {
                for (var i = 0; i < $rootScope.templateNoteEdit.tags.length; i++) {
                    $('input#tags').tagsinput('add', ($rootScope.templateNoteEdit.tags[i].visibility==1 ? '+':'')+$rootScope.templateNoteEdit.tags[i].title);
                }
            }

            $('input#tags').on('beforeItemAdd', function (ev) {
                // console.log(ev.item);
                // ev.item = ev.item.replace('+', '');
                window.onCkeditChangeFunction();
            }).on('itemRemoved', function () {
                window.onCkeditChangeFunction();
            });

            var ck = CKEDITOR.replace('content', {
                fullPage: false,
                // extraPlugins: 'myplugin,anotherplugin',
                // removePlugins: 'sourcearea,save,newpage,preview,print,forms',
                toolbarCanCollapse: true,
                toolbarStartupExpanded: false,
                tabSpaces: 4,
                skin: 'bootstrapck',
                height: '400px',

                autosave_saveOnDestroy: true,
                autosave_saveDetectionSelectors: "[id*='updateNote']"
            });

            ck.on('change', _onChangeFunction);

            window.onbeforeunloadInfo = $rootScope.i18n.messages.onbeforeunload_info;
            window.onbeforeunload = function () {
                if (window.hasCkeditChangedFunction()) {
                    return window.onbeforeunloadInfo;
                }
            };
        };

        var loadedTags = $rootScope.tags;

        var userTags = new Bloodhound({
            datumTokenizer: Bloodhound.tokenizers.obj.whitespace('title'),
            queryTokenizer: Bloodhound.tokenizers.whitespace,
            local: loadedTags
        });

        userTags.initialize();

        $('input#tags').tagsinput({
            allowDuplicates: false,
            trimValue: true,
            freeInput: true,
            tagClass: function (item) {
                if (item[0] == '+') {
                    return "input-tag-public";
                } else {
                    return "input-tag-private";
                }
            },
            typeaheadjs: {
                name: 'tags',
                displayKey: 'title',
                valueKey: 'title',
                source: userTags.ttAdapter()
            }
        });
        // This doesn't seem to be working. I might be patching the tagsinput plugin someday to get this working cleanly.
        // $('input#tags').tagsinput('focus');
        // $('input#tags').find('input.tt-input').blur(function() {
        //   var e = jQuery.Event('keydown', { which: 13 });
        //   $(this).trigger(e);
        // });

        $scope.$on('deleteAttachmentLink', function (ev, args) {
            if (typeof args == "undefined" || typeof args.url == "undefined") {
                return false;
            }

            var documentNode = CKEDITOR.instances.content.document.$,
                elementCollection = documentNode.getElementsByTagName('a');

            var i = elementCollection.length;
            while (i--) {
                var element = elementCollection[i];
                if (element.getAttribute("href") == args.url) {
                    element.parentNode.removeChild(element);
                }
            }
        });

        $scope.$on('insertAttachmentLink', function (ev, args) {
            if (typeof args == "undefined" || typeof args.url == "undefined" || typeof args.mimetype == "undefined") {
                return false;
            }

            var insertHtml = "";

            switch (args.mimetype.match(/^[a-z]+\/*/g)[0]) {
                case "image/":
                    insertHtml = '<a href="' + args.url + '" title="' + args.filename + '" target="_blank">' + '<img src="' + args.url + '" alt="' + args.filename + '">' + '</a>';
                    break;
                default:
                    insertHtml = '<a href="' + args.url + '" title="' + args.filename + '" target="_blank">' + args.filename + '</a>';
            }

            CKEDITOR.instances.content.insertHtml(insertHtml);
        });

        $rootScope.uploadUrl = paperworkApi + '/notebooks/' + ($routeParams.notebookId) + '/notes/' + ($routeParams.noteId) + '/versions/' + paperworkDbAllId + '/attachments';

        if (typeof $rootScope.notes == "undefined") {
            NotesService.getNotesInNotebook($rootScope.notebookSelectedId, (function (_notebookId, _noteId) {
                return function () {
                    thisController(_notebookId, _noteId, function () {
                        window.onCkeditChangeFunction();
                    });
                }
            })(($routeParams.notebookId), ($routeParams.noteId)));
        } else {
            thisController(($routeParams.notebookId), ($routeParams.noteId), function () {
                window.onCkeditChangeFunction();
            });
        }

        $rootScope.navbarMainMenu = false;
        $rootScope.navbarSearchForm = false;
        $rootScope.expandedNoteLayout = true;
	CKEDITOR.dtd.$removeEmpty['span'] = false; //necessary to CKEDITOR fontawesome plugin
    }]);

angular.module('paperworkNotes').controller('NotesListController',
  ["$scope", "$rootScope", "$location", "$routeParams", "NotesService", "paperworkDbAllId", function($scope, $rootScope, $location, $routeParams, NotesService, paperworkDbAllId) {
    $rootScope.noteSelectedId = {};
    $rootScope.notesSelectedIds = {};
    NotesService.getNotesInNotebook(paperworkDbAllId);

    $scope.noteSelect = function($notebookId, $noteId) {
      $rootScope.noteSelectedId = { 'notebookId': ($notebookId), 'noteId': ($noteId) };
    };

    $scope.getNoteLink = function(notebookId, noteId) {

      var path = "/n/" + (notebookId) + "/" + (noteId);
      if($location.$$path.match(/^\/s\//i) != null) {
        var basePath = $location.$$path.match(/(^\/s\/[^\/]*)/i);
        return basePath[1] + path;
      }
      return path;
    };
      //$scope.noteSelectedId=$rootScope.noteSelectedId;
      $scope.openSelectedNote = function(){
	  $location.path("/n/" + ($rootScope.notebookSelectedId)+"/"+($rootScope.noteSelectedId.noteId));
      };
  }]);

angular.module('paperworkNotes').controller('NotesShowController',
   ["$scope", "$rootScope", "$location", "$routeParams", "NotesService", "paperworkDbAllId", function($scope, $rootScope, $location, $routeParams, NotesService, paperworkDbAllId) {
     if($routeParams.noteId === "undefined") {
       return;
     }

     $rootScope.notebookSelectedId = ($routeParams.notebookId);
     $rootScope.noteSelectedId = {'notebookId': ($routeParams.notebookId), 'noteId': ($routeParams.noteId)};
     $rootScope.versionSelectedId = {'notebookId': ($routeParams.notebookId), 'noteId': ($routeParams.noteId), 'versionId': paperworkDbAllId};

    if(typeof $routeParams.searchQuery == "undefined" || $routeParams.searchQuery == null || $routeParams.searchQuery.length <= 0) {
      NotesService.getNotesInNotebook($rootScope.getNotebookSelectedId());
    }

    NotesService.getNoteById(($routeParams.noteId));

    NotesService.getNoteVersionAttachments($rootScope.getNotebookSelectedId(), ($rootScope.getNoteSelectedId(true)).noteId, $rootScope.getVersionSelectedId(true).versionId,
      function(response) {
        $rootScope.fileList = response;
      });

    $('body').popover({
      selector:  '#note-info',
      container: 'body',
      viewport:  {
        selector: '#paperworkView',
        padding:  16
      },
      trigger:   'click',
      html:      true
    });

    $rootScope.navbarMainMenu = true;
    $rootScope.navbarSearchForm = true;
    $rootScope.expandedNoteLayout = false;
  }]);

/**
 * Directive that preprocesses content of a note.
 *
 * Currently, it dynamicaly inserts highlight.js directive into content if there any
 * code blocks.
 */
angular.module('paperworkNotes')
    .directive('pwNoteContent', ["$compile", function ($compile) {
        var ae = angular.element;

        return {
            restrict: 'AE',
            scope: {
                content: '='
            },
            link: function (scope, element) {
                // At the very app start, bound note.version.content is empty.
                // So content must be updated later, at the change.
                scope.$watch('content', function () {
                    if (!scope.content) {
                        return;
                    }

                    // Wrap value to not lose it content.
                    var content = ae('<div class="node-content-wrapper">' + scope.content + '</div>'),
                        $code = content.find('code');

                    if ($code.length) {
                        $code.each(function () {
                            var $this = ae(this, content);

                            // Remove outer <pre> as highlightjs creates wrapper <pre>.
                            if ($this.parent().prop('tagName') === 'PRE') {
                                $this.unwrap();
                            }

                            // Replace <code> with div to avoid styles applied to <code>
                            var $codeContainer = ae('<div>', {
                                'class': $this.attr('class'),
                                'language': $this.attr('class').replace(/language-/, ''),
                                'html': $this.html()
                            });

                            // Add highlightjs to the container and set no-escape option.
                            $codeContainer.attr('hljs', '').attr('no-escape', '');

                            $this.replaceWith($codeContainer);
                        });
                    }

                    // Put processed html into element.
                    element.html(content.html());

                    // Compile it to make hljs directive work.
                    $compile(element.contents())(scope);
                });

            }
        }
    }]);
angular.module('paperworkNotes')
    .directive('pwStatusNotification', ["$timeout", function ($timeout) {
        var jq = angular.element, timeoutId = null;

        return {
            restrict: 'AE',
            template: '<div class="request_status_feedback" ng-hide="!visible" ng-click="hide()" ng-class="class">{{message}}</div>',
            link: function (scope, elem) {
                var $notificationArea = elem.children().first();

                /**
                 * Hide if clicked.
                 */
                scope.hide = function () {
                    $notificationArea.fadeOut('fast', function() {
                        scope.visible = false;

                        scope.$apply();
                    });

                    $timeout.cancel(timeoutId);
                };

                /**
                 * Respond to the notification event.
                 */
                scope.$on('paperwork.StatusNotificationSent', function (e, type, message) {

                    scope.message = message;

                    //Add type class to notification
                    scope.class = type;

                    // Cancel timeout, if there is one
                    $timeout.cancel(timeoutId);

                    // Display the notification.
                    scope.visible = true;

                    $notificationArea.slideDown(500);

                    // Hide after 5 seconds
                    timeoutId = $timeout(function () {
                        $notificationArea.slideUp(500);

                        scope.visible = false;
                    }, 5000);

                    // If element is removed from DOM, remove timeout
                    elem.bind('$destroy', function () {
                        $timeout.cancel(timeoutId);
                    });

                });
            }
        }
    }]);

angular.module('paperworkNotes').factory('StatusNotifications', ["$timeout", "$rootScope", function ($timeout, $rootScope) {

    var StatusNotificationService = {}, timeoutId = null, jq = jq;

    StatusNotificationService.sendStatusFeedback = function (type, messageKey) {
        var message;

        // Get translated key and broadcast event to notifier.
        message = $rootScope.i18n.notifications[messageKey];

        $rootScope.$broadcast('paperwork.StatusNotificationSent', type, message);

    };

    return StatusNotificationService;

}]);

angular.module('paperworkNotes').controller('SearchController',
  ["$scope", "$rootScope", "$location", "$routeParams", "NotesService", function($scope, $rootScope, $location, $routeParams, NotesService) {
    var searchQuery = $routeParams.searchQuery;

    $rootScope.search = searchQuery;

    NotesService.getNotesFromSearch(searchQuery);
    $rootScope.note = null;

    $rootScope.navbarMainMenu = true;
    $rootScope.navbarSearchForm = true;
    $rootScope.expandedNoteLayout = false;
  }]);

angular.module('paperworkNotes').controller('SettingsController',
  ["$scope", "$rootScope", "$http", "$sce", function ($scope, $rootScope, $http, $sce) {
    $scope.tabs = {
      'client': {
        isLoaded: false,
        loadInProcess: false,
        content: ''
      }
    };

    $scope.getTabContent = function (tabName) {

      if (typeof $scope.tabs[tabName] == 'undefined' || $scope.tabs[tabName].isLoaded || $scope.tabs[tabName].loadInProcess) {
        return
      }

      var $opts = {method: 'GET', url: 'templates/' + tabName};
      $scope.tabs[tabName].loadInProcess = true;
      $http($opts).
        success(function (data, status, headers, config) {
          $scope.tabs[tabName].content = $sce.trustAsHtml(data);
          $scope.tabs[tabName].isLoaded = true;
          $scope.tabs[tabName].loadInProcess = false;
        }).
        error(function (data, status, headers, config) {

        });
    };
  }]);

angular.module('paperworkNotes').controller('SidebarManageNotebooksController',
  ["$scope", "$rootScope", "$location", "$routeParams", "NotebooksService", function($scope, $rootScope, $location, $routeParams, NotebooksService) {
    $scope.modalList = [];

    $('#modalManageNotebooks').on('hidden.bs.modal', function(e) {
      //$scope.modalList = [];
      //$scope.$apply();    // Because not angular scope
    });

    //$('#modalManageNotebooks').on('show.bs.modal', function (e) {
    // Added watch to rebuild list when we add new element
    $rootScope.$watch('notebooks', function(newValue, oldValue) {
      // Remove 'All Notes' item
      var data = ($.isArray($rootScope.notebooks)) ? $rootScope.notebooks.slice() : [];
      for(var i in data) {
        if(data[i].id == 0) {
          data.splice(i, 1);
          break;
        }
      }
      $scope.modalList = data;
    });

    var buildShortcutChk = function(editable, newRow) {
      var shortcut = false;
      if(!newRow) {
        shortcut = !!NotebooksService.getShortcutByNotebookIdLocal(editable.options.pk);
      }

      editable.container.$form.find('.control-group').after(
        $('<div/>').addClass('checkbox shortcut-chk').append(
          $('<label/>').append(
            $('<input/>').attr({
              'type':  'checkbox',
              'name':  'shortcut',
              'value': '1'
            }).prop('checked', shortcut)
          ).append($rootScope.i18n.notebooks.add_shortcut)
        )
      );
    };

    var parseParams = function(params) {
      return {
        id:       params.pk,
        title:    params.value,
        shortcut: $(this).parent().find("input[name='shortcut']").is(':checked'),
        type:     0
      };
    };

    $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {
      $('#modalManageNotebooks .line').editable({
        params:       parseParams,
        send:         'always',
        savenochange: true,
        url:          function(data) {
          NotebooksService.updateNotebook(data.id, data, function(status, responseData) {
            switch(status) {
              case 200:
                NotebooksService.getNotebooks();
                NotebooksService.getNotebookShortcuts(null);
                break;
              case 400:
                for(var i in responseData.errors) {
                  var msg = responseData.errors[i];
                  break;
                }
                $('#modalManageNotebooks').find(".line[data-pk='" + data.id + "']").tooltip({
                  title:   msg,
                  trigger: 'manual'
                }).tooltip('show');
                break;
            }
          });
        }
      }).on('shown', function(e, editable) {
        buildShortcutChk(editable, false);
        editable.$element.tooltip('destroy');
      });
    });

    $scope.deleteItem = function(id) {
      $rootScope.modalMessageBox = {
        'title':   $rootScope.i18n.keywords.delete_notebook_question,
        'content': $rootScope.i18n.keywords.delete_notebook_message,
        'buttons': [
          {
            'label':     $rootScope.i18n.keywords.cancel,
            'isDismiss': true
          },
          {
            'id':    'button-yes',
            'label': $rootScope.i18n.keywords.yes,
            'class': 'btn-warning',
            'click': function() {
              NotebooksService.deleteNotebook(id, function(status, data) {
                NotebooksService.getNotebooks();
                NotebooksService.getNotebookShortcuts();
              });
              $('#modalManageNotebooks').find(".line[data-pk='" + id + "']").closest('.row').remove();
              return true;
            }
          }
        ]
      };
      $('#modalMessageBox').modal('show');
    };

    $scope.addNotebook = function() {

      // build item
      var $row = $('<div/>').addClass('row')
        .append(
        $('<div/>').addClass('col-sm-10').append(
          $('<a/>').addClass('line').data('name', 'title')
        )
      )
        .append(
        $('<div/>').addClass('col-sm-2')
      );

      $row.find('a').editable({
        params: parseParams,
        url:    function(data) {
          NotebooksService.createNotebook(data, function(status, responseData) {
            switch(status) {
              case 200:
                NotebooksService.getNotebooks();
                NotebooksService.getNotebookShortcuts(null);

                $row.remove();
                //$scope.modalList.push(responseData.response);  --- we will  use $watch instead
                break;
              case 400:
                for(var i in responseData.errors) {
                  var msg = responseData.errors[i];
                  break;
                }
                $row.find(".line").tooltip({
                  title:   msg,
                  trigger: 'manual'
                }).tooltip('show');

                setTimeout(function() {
                  $row.remove();
                }, 3000);
                break;
            }
          });
        }
      }).on('hidden', function(e, reason) {
        if(reason != 'save') {
          $row.remove();
        }
      }).on('shown', function(e, editable) {
        buildShortcutChk(editable, true);
        editable.$element.tooltip('destroy');
      });

      $('#modalManageNotebooks .manage-list-content').append($row);

      setTimeout(function() { // doesn't work without timeout
        $row.find('a').editable('show');
      }, 1);
    };
  }]);

angular.module('paperworkNotes').controller('SidebarManageTagsController',
  ["$scope", "$rootScope", "$location", "$routeParams", "NotebooksService", function($scope, $rootScope, $location, $routeParams, NotebooksService) {
    $scope.modalTags = [];

    $('#modalManageTags').on('hidden.bs.modal', function(e) {
      $scope.modalTags = [];
      $scope.$apply();    // Because not angular scope
    });
    $('#modalManageTags').on('show.bs.modal', function(e) {
      $scope.modalTags = $rootScope.tags;
    });

    $scope.$on('ngRepeatFinished', function(ngRepeatFinishedEvent) {
      $('#modalManageTags .line').editable({
        mode:   'inline',
        params: function(params) {
          return {
            id:    params.pk,
            title: params.value
          };
        },
        url:    function(data) {
          NotebooksService.updateTag(data.id, data, function(status, responseData) {
            switch(status) {
              case 200:
                NotebooksService.getTags();
                break;
              case 400:
                for(var i in responseData.errors) {
                  var msg = responseData.errors[i];
                  break;
                }
                $('#modalManageTags').find(".line[data-pk='" + data.id + "']").tooltip({
                  title:   msg,
                  trigger: 'manual'
                }).tooltip('show');
                break;
            }
          });
        }
      }).on('shown', function(e, editable) {
        editable.$element.tooltip('destroy');
      });
    });

    $scope.unNestTag=function(tagId){
      $rootScope.modalMessageBox = {
        'title':   $rootScope.i18n.keywords.unnest_tag_question,
        'content': $rootScope.i18n.keywords.unnest_tag_message,
        'buttons': [
          {
            'label':     $rootScope.i18n.keywords.cancel,
            'isDismiss': true
          },
          {
            'id':    'button-yes',
            'label': $rootScope.i18n.keywords.yes,
            'class': 'btn-warning',
            'click': function() {
              NotebooksService.nestTag(tagId,null, function() {
                NotebooksService.getTags();
                $('#modalManageTags').find(".line[data-pk='" + tagId + "']").parent().next().remove();
              });
              return true;
            }
          }
        ]
      };
      $('#modalMessageBox').modal('show');
    }
	
    $scope.deleteTag = function(tagId) {
      $rootScope.modalMessageBox = {
        'title':   $rootScope.i18n.keywords.delete_tag_question,
        'content': $rootScope.i18n.keywords.delete_tag_message,
        'buttons': [
          {
            'label':     $rootScope.i18n.keywords.cancel,
            'isDismiss': true
          },
          {
            'id':    'button-yes',
            'label': $rootScope.i18n.keywords.yes,
            'class': 'btn-warning',
            'click': function() {
              NotebooksService.deleteTag(tagId, function() {
                NotebooksService.getTags();
                $('#modalManageTags').find(".line[data-pk='" + tagId + "']").closest('.row').remove();
              });
              return true;
            }
          }
        ]
      };
      $('#modalMessageBox').modal('show');
    }
  }]);

angular.module('paperworkNotes').controller('SidebarNotebooksController',
   ["$scope", "$rootScope", "$location", "$routeParams", "$filter", "$q", "NotebooksService", "NotesService", "paperworkDbAllId", "StatusNotifications", "NetService", function($scope, $rootScope, $location, $routeParams, $filter, $q, NotebooksService, NotesService, paperworkDbAllId, StatusNotifications, NetService) {
     $rootScope.notebookSelectedId = paperworkDbAllId;
     $rootScope.tagsSelectedId = -1;
     $rootScope.dateSelected = -1;
     $scope.shortcutsCollapsed=false;
     $scope.notebooksCollapsed=false;
     $scope.tagsCollapsed=false;
     $scope.calentdarCollapsed=false;
    

    $scope.isVisible = function() {
      return !$rootScope.expandedNoteLayout;
    };

    $scope.notebookIconByType = function(type) {
      switch(parseInt(type)) {
        case 0:
          return 'fa-book';
        case 1:
          return 'fa-folder-open';
        case 2:
          return 'fa-archive';
      }
    };

    $rootScope.getNotebookSelectedId = function() {
      return $rootScope.notebookSelectedId;
    };

    
    $scope.getUsers = function (notebookId, propagationToNotes, update){
        if(typeof $rootScope.i18n != "undefined")
	    $rootScope.umasks=[{'name':$rootScope.i18n.keywords.not_shared, 'value':0},
		   {'name':$rootScope.i18n.keywords.read_only, 'value':4},
		   {'name':$rootScope.i18n.keywords.read_write, 'value':6}];
        $rootScope.showWarningNotebook=false;
        $rootScope.showWarningNotes=false;
	NetService.apiGet('/users/notebooks/'+notebookId, function(status, data) {
        if(status == 200) {
		if(update && $rootScope.users.length==data.response.length){
			angular.forEach($rootScope.users,function(value,key){
				value['owner']=data.response[key]['owner'];
			});
		}else{
        	  $rootScope.users = data.response;
		}
          angular.forEach($rootScope.users, function(value,key){
                if (value['is_current_user'] && ! value['owner']) {
                  $rootScope.showWarningNotebook=true;
                }
            });
        }
        if (propagationToNotes) {
          noteId=[];
          angular.forEach($rootScope.notes, function(value,key){
            noteId.push(value['id']);
          });
          NetService.apiGet('/users/'+noteId, function(status, data){
            if (status==200) {
              angular.forEach($rootScope.users, function(value,key){
                value['owner']=data.response[key]['owner'];
                if (value['is_current_user'] && ! value['owner']) {
                  $rootScope.showWarningNotes=true;
                }
              });
            }
          });
        }
      });
    };
    
    $scope.openNotebook = function(notebookId, type, index) {
      if(parseInt(type) == 0 || parseInt(type) == 2) {
        // If the notebooks tree should be collapsed, expand it,
        // so the user sees which notebook is being selected through the shortcut.
        var $treeHeaderNotebooks = jQuery('.tree-header-notebooks');
        if($treeHeaderNotebooks.children('.fa').hasClass('fa-chevron-right')) {
          $treeHeaderNotebooks.click();
        }

         $rootScope.notebookSelectedId = parseInt(index);
         $rootScope.dateSelected = -1;
         $rootScope.tagsSelectedId = -1;
         $rootScope.search = "";
         $location.path("/n/" + (notebookId));
       }
     };

    $scope.openFilter = function() {
      var s = "";
      if($rootScope.notebookSelectedId != 0) {
        s += "notebookid:" + $rootScope.notebookSelectedId;
      }

      if($rootScope.tagsSelectedId != -1) {
        if (s.length > 0) s += " ";
        s += "tagid:" + $rootScope.tagsSelectedId;
      }

      if($rootScope.dateSelected != -1) {
        if (s.length > 0) s += " ";
        s += "date:" + $filter('date')($rootScope.dateSelected, 'yyyy-MM-dd');
      }

      $rootScope.search = s;
      if(s.length) {
        $location.path("/s/" + $rootScope.search);
      } else {
        $location.path("/n/" + paperworkDbAllId);
      }
    };

    $rootScope.openTag = function(tagId) {
      if($rootScope.tagsSelectedId === tagId) {
        $rootScope.tagsSelectedId = -1;
      } else {
        $rootScope.tagsSelectedId = tagId;
      }

      $rootScope.notebookSelectedId = 0;
      $rootScope.dateSelected = -1;

      $scope.openFilter();
    };

    $scope.openDate = function(date) {
      if($filter('date')($rootScope.dateSelected, "shortDate") === $filter('date')(date, "shortDate")) {
        $rootScope.dateSelected = -1;
        $scope.sidebarCalendar = undefined;
      } else {
        $rootScope.dateSelected = date;
      }

      $scope.openFilter();
    };

    $scope.modalNewNotebook = function() {
      $rootScope.modalNotebook = {
        'action':   'create',
        'shortcut': '',
        'title':    ''
      };
      $('#modalNotebook').modal("show");
    };

    $scope.modalNotebookSubmit = function() {
      var data = {
        'type':     0,
        'title':    $rootScope.modalNotebook.title,
        'shortcut': $rootScope.modalNotebook.shortcut
      };

      var callback = (function(_paperworkNotebooksService) {
        return function(status, data) {
          var param;
          var action = $rootScope.modalNotebook.action;
          switch(status) {
            case 200:
              // FIXME
              $('#modalNotebook').modal('hide');
              _paperworkNotebooksService.getNotebooks();
              _paperworkNotebooksService.getNotebookShortcuts(null);
              param = "notebook_" + action + "_successfully";
              StatusNotifications.sendStatusFeedback("success", param);
              break;
            case 400:
              if(typeof data.errors.title != "undefined") {
                // FIXME
                $('#modalNotebook').find('input[name="title"]').parents('.form-group').addClass('has-warning');
              }
              //param = "notebook_" + action + "_failed";
              //StatusNotifications.sendStatusFeedback("error", param);
              break;
            default:
              param = "notebook_" + action + "_failed";
              StatusNotifications.sendStatusFeedback("error", param);
              break;
          }
        };
      })(NotebooksService);

      if($rootScope.modalNotebook.action == "create") {
        NotebooksService.createNotebook(data, callback);
      } else if($rootScope.modalNotebook.action == "edit") {
        // if($rootScope.modalNotebook.delete) {
        // NotebooksService.deleteNotebook($rootScope.modalNotebook.id, callback);
        // } else {
        NotebooksService.updateNotebook($rootScope.modalNotebook.id, data, callback);
        // }
      }
    };

    $scope.notebookSelectedModel = 0;
    $scope.modalNotebookSelectSubmit = function(notebookId, noteId, toNotebookId) {
      $rootScope.modalMessageBox.theCallback(notebookId, noteId, toNotebookId);
    };

    $scope.modalEditNotebook = function(notebookId) {
      var notebook = NotebooksService.getNotebookByIdLocal(notebookId);

      if(notebook == null || $rootScope.menuItemNotebookClass() === 'disabled') {
        return false;
      }

      $rootScope.modalNotebook = {
        'action': 'edit',
        'id':     notebookId,
        'title':  notebook.title
      };

      var shortcut = NotebooksService.getShortcutByNotebookIdLocal(notebookId);

      if(shortcut == null) {
        $rootScope.modalNotebook.shortcut = false;
      } else {
        $rootScope.modalNotebook.shortcut = true;
      }

      // FIXME
      $('#modalNotebook').modal("show");
    };

    $scope.modalDeleteNotebook = function(notebookId) {

      if($rootScope.menuItemNotebookClass() === 'disabled') {
        return false;
      }

      var callback = (function() {
        return function(status, data) {
          switch(status) {
            case 200:
              NotebooksService.getNotebookShortcuts(null);
              NotebooksService.getNotebooks();
              $location.path("/n/0" + paperworkDbAllId);
              StatusNotifications.sendStatusFeedback("success", "notebook_deleted_successfully");
              break;
            case 400:
              StatusNotifications.sendStatusFeedback("error", "notebook_delete_fail");
              break;
          }
        };
      })();

      $rootScope.messageBox({
        'title':   $rootScope.i18n.keywords.delete_notebook_question,
        'content': $rootScope.i18n.keywords.delete_notebook_message,
        'buttons': [
          {
            // We don't need an id for the dismiss button.
            // 'id': 'button-no',
            'label':     $rootScope.i18n.keywords.cancel,
            'isDismiss': true
          },
          {
            'id':    'button-yes',
            'label': $rootScope.i18n.keywords.yes,
            'class': 'btn-warning',
            'click': function() {
              NotebooksService.deleteNotebook(notebookId, callback);
              return true;
            },
          }
        ]
      });
    };
    
    $rootScope.propagationToNotes=false;
    $scope.modalShareNotebook = function(notebookId){
      if($rootScope.menuItemNotebookClass() === 'disabled') {
        return false;
      }
      $scope.getUsers(notebookId, $rootScope.propagationToNotes,false);
      $rootScope.modalUsersSelect({
        'notebookId': notebookId,
        'theCallback':function(notebookId,toUsers, propagationToNotes){
          toUserId=[]
          toUMASK=[]
          angular.forEach(toUsers, function(user,key){
              if (!user['is_current_user']) {
              toUserId.push(user['id']);
              toUMASK.push(user['umask']);
              }
            });
          NotebooksService.shareNotebook(notebookId,toUserId, toUMASK, function(_notebookId){
            $('#modalUsersNotebookSelect').modal('hide');
            $location.path("/n/"+(_notebookId));
            if (propagationToNotes) {
              noteId=[]
              angular.forEach($rootScope.notes, function(value,key){
                noteId.push(value['id']);
              });
              NotesService.shareNote(_notebookId,noteId,toUserId, toUMASK,function(){});
            }
          });
          return true;
        }
      });
      
    };
    $scope.modalUsersNotebookSelectSubmit = function(notebookId, toUserId, propagationToNotes) {
      $rootScope.modalMessageBox.theCallback(notebookId, toUserId, propagationToNotes);
    };
    
    $scope.modalUsersNotebookSelectCheck = function(notebookId,_prop){
      $rootScope.propagationToNotes=_prop;
      $scope.getUsers(notebookId, _prop, true);  
    }
    
    $scope.onDragSuccess = function(data, event) {
      //
    };
    
    $scope.onDropSuccess = function(data, event) {
      NotesService.moveNote(data.notebook_id, data.id, this.notebook.id);
      // Try to make the openNotebook dependant on the result of the move
      $scope.openNotebook(this.notebook.id, this.notebook.type, this.notebook.id);
    };

    $scope.modalManageTags = function() {
      $('#modalManageTags').modal("show");
    };

    $scope.onDropToTag = function(data, event) {
	toid=this.tag.id;
	if('visibility' in data){
	    //we're dragging a tag
	    NotebooksService.nestTag(data.id, toid, function(status,responseData){
            switch(status) {
              case 200:
                NotebooksService.getTags();
                break;
              case 400:
                for(var i in responseData.errors) {
                  var msg = responseData.errors[i];
                  break;
                }
                break;
            }
});
	    $scope.openTag(data.id);
	}else{
	    //we're dragging a note
	    if ('child' in this) {
		toid=this.child.id;
	    }
	    NotesService.tagNote($rootScope.note.notebook_id, $rootScope.note.id, toid);
	    $scope.openTag(toid);
	}
    };

    $scope.modalManageNotebooks = function() {
      $('#modalManageNotebooks').modal("show");
    };

    var sidebarCalendarDefer = $q.defer();

    $scope.sidebarCalendarEnabledDates = [];
    $scope.sidebarCalendarPromise = sidebarCalendarDefer.promise;
    $scope.sidebarCalendarIsDisabled = function(date, mode) {
      if(mode !== "day") {
        return false;
      }

      var shortDate = $filter('date')(date, "yyyy-MM-dd");
      return $.inArray(shortDate, $scope.sidebarCalendarEnabledDates) == -1;
    };

    $scope.sidebarCalendarCallback = function(data) {
      while($scope.sidebarCalendarEnabledDates.length) {
        $scope.sidebarCalendarEnabledDates.pop();
      }

      $.each(data, function(key) {
        $scope.sidebarCalendarEnabledDates.push(key);
      });

      sidebarCalendarDefer.notify(new Date().getTime());
    };

    NotebooksService.getCalendar($scope.sidebarCalendarCallback);
    NotebooksService.getNotebookShortcuts(null);
    NotebooksService.getNotebooks();
    NotebooksService.getTags();
  }]);

angular.module('paperworkNotes').controller('SidebarNotesController',
  ["$scope", "$rootScope", "$location", "$timeout", "$routeParams", "NotebooksService", "NotesService", "ngDraggable", "StatusNotifications", "NetService", function($scope, $rootScope, $location, $timeout, $routeParams, NotebooksService, NotesService, ngDraggable, StatusNotifications, NetService) {
    $scope.isVisible = function() {
      return !$rootScope.expandedNoteLayout;
    };

    $rootScope.getNoteSelectedId = function(asObject) {
      if(asObject === true) {
        return $rootScope.noteSelectedId;
      }
      return $rootScope.noteSelectedId.notebookId + "-" + $rootScope.noteSelectedId.noteId;
    };

    $rootScope.setNoteSelectedId = function(notebookId, noteId) {
      $rootScope.noteSelectedId.notebookId = notebookId;
      $rootScope.noteSelectedId.noteId = noteId;
    };

    $rootScope.getNoteByIdLocal = function(noteId) {
      var i = 0, l = $rootScope.notes.length;
      for(i = 0; i < l; i++) {
        if($rootScope.notes[i].id == noteId) {
          return $rootScope.notes[i];
        }
      }
      return null;
    };
    
    $scope.getUsers = function (noteId, callback){
      $scope.can_share=false;
        if(typeof $rootScope.i18n != "undefined")
	    $rootScope.umasks=[{'name':$rootScope.i18n.keywords.not_shared, 'value':0},
		   {'name':$rootScope.i18n.keywords.read_only, 'value':4},
		   {'name':$rootScope.i18n.keywords.read_write, 'value':6}];
	NetService.apiGet('/users/'+noteId, function(status, data) {
        if(status == 200) {
          $rootScope.users = data.response;
          angular.forEach(data.response,function(user,key){
            if (user['is_current_user'] && user['owner']) {
              $scope.can_share=true;
            }
            });
          callback(noteId);
        }
      });
    };
    $scope.newNote = function(notebookId) {
      if($rootScope.menuItemNotebookClass() === 'disabled') {
        return false;
      }
      
      var data = {
        'title':           $rootScope.i18n.keywords.untitled || 'Untitled',
        'content':         '',
        'content_preview': ''
      };
      
      var callback = (function(_notebookId) {
        return function(status, data) {
          console.log(status);
          switch(status) {
            case 200:
              $rootScope.templateNoteEdit = {};
              $location.path("/n/" + _notebookId + "/" + data.response.id + "/edit");
              StatusNotifications.sendStatusFeedback("success", "note_created_successfully");
              break;
            case 400:
              StatusNotifications.sendStatusFeedback("error", "note_create_fail");
              break;
            default:
              StatusNotifications.sendStatusFeedback("error", "note_create_fail");
              break;
          }
        };
      })(notebookId);
      
      if(typeof notebookId == "undefined" || notebookId == 0 || notebookId === "00000000-0000-0000-0000-000000000000") {
        //Open Select Notebook dialog to choose destination of new note 
        $rootScope.modalNotebookSelect({ 
            'notebookId': notebookId,
            'noteId': 0,
            'theCallback': function(notebookId, noteId, toNotebookId) {
                $('#modalNotebookSelect').modal('hide');
                NotesService.createNote(toNotebookId, data, callback);
            }
        });
      }else{
        NotesService.createNote(notebookId, data, callback);
      }
    };

    $scope.editNote = function(notebookId, noteId) {
      if($rootScope.menuItemNoteClass('single') === 'disabled') {
        return false;
      }
      $location.path("/n/" + notebookId + "/" + noteId + "/edit");
    };

    $scope.editNotes = function(notebookId, noteId) {
      if($rootScope.menuItemNoteClass('multiple') === 'disabled') {
        return false;
      }

      if($rootScope.editMultipleNotes == true) {
        $rootScope.editMultipleNotes = false;
      } else {
        $rootScope.editMultipleNotes = true;
      }
    };

    $scope.updateNote = function() {
      // if(typeof $rootScope.templateNoteEdit == "undefined" || $rootScope.templateNoteEdit == null) {
      //   $rootScope.templateNoteEdit = {};
      // }

      $rootScope.templateNoteEdit.version.content = CKEDITOR.instances.content.getData();

      var data = {
        'title':   $rootScope.templateNoteEdit.version.title,
        'content': $rootScope.templateNoteEdit.version.content,
        'tags':    $('input#tags').tagsinput('items')
      };

      var callback = (function() {
        return function(status, data) {
          switch(status) {
            case 200:
              $rootScope.errors = {};
              $rootScope.templateNoteEdit.modified = false;
              CKEDITOR.instances.content.resetDirty();
              // Temporary until related issue is closed
              StatusNotifications.sendStatusFeedback("success", "note_saved_successfully");
              break;
            case 400:
              $rootScope.errors = data.errors;
              $rootScope.messageBox({
                'title':   $rootScope.i18n.messages.error_message,
                'content': data.errors,
                'buttons': [
                  {
                    // We don't need an id for the dismiss button.
                    // 'id': 'button-no',
                    'label':     $rootScope.i18n.keywords.damn,
                    'isDismiss': true
                  }
                ]
              });
              break;
            default:
              StatusNotifications.sendStatusFeedback("error", "note_save_failed");
              break;
          }
        };
      })();

      NotesService.updateNote($rootScope.note.id, data, callback);
    };

    $scope.closeNote = function() {
      var closeNoteCallback = function() {
        var currentNote = $rootScope.getNoteSelectedId(true);
        $location.path("/n/" + $rootScope.getNotebookSelectedId() + "/" + currentNote.noteId);
        CKEDITOR.instances.content.destroy();
        $rootScope.templateNoteEdit = {};
        NotebooksService.getTags();
        return true;
      };

      if($rootScope.templateNoteEdit && $rootScope.templateNoteEdit.modified) {
        $rootScope.messageBox({
          'title':   $rootScope.i18n.keywords.close_without_saving_question,
          'content': $rootScope.i18n.keywords.close_without_saving_message,
          'buttons': [
            {
              // We don't need an id for the dismiss button.
              // 'id': 'button-no',
              'label':     $rootScope.i18n.keywords.cancel,
              'isDismiss': true
            },
            {
              'id':    'button-yes',
              'label': $rootScope.i18n.keywords.yes,
              'class': 'btn-warning',
              'click': function() {
                return closeNoteCallback();
              }
            }
          ]
        });
      } else {
        return closeNoteCallback();
      }
    };

    $scope.modalDeleteNote = function(notebookId, noteId) {
      if($rootScope.menuItemNoteClass('multiple') === 'disabled') {
        return false;
      }
      var callback = (function() {
        return function(status, data) {
          switch(status) {
            case 200:
              $location.path("/n/" + notebookId);
              break;
            case 400:
              // TODO: Show some kind of error
              break;
          }
        };
      })();

      $rootScope.messageBox({
        'title':   ($rootScope.editMultipleNotes ? $rootScope.i18n.keywords.delete_notes_question : $rootScope.i18n.keywords.delete_note_question),
        'content': ($rootScope.editMultipleNotes ? $rootScope.i18n.keywords.delete_notes_message : $rootScope.i18n.keywords.delete_note_message),
        'buttons': [
          {
            // We don't need an id for the dismiss button.
            // 'id': 'button-no',
            'label':     $rootScope.i18n.keywords.cancel,
            'isDismiss': true
          },
          {
            'id':    'button-yes',
            'label': $rootScope.i18n.keywords.yes,
            'class': 'btn-warning',
            'click': function() {
              if($rootScope.editMultipleNotes) {
                noteId = [];
                angular.forEach($rootScope.notesSelectedIds, function(isChecked, checkedNoteId) {
                  if(isChecked) {
                    noteId.push(checkedNoteId);
                  }
                });
              }
              NotesService.deleteNote(noteId, callback, function() {
                $location.path("/n/" + notebookId);
              });
              return true;
            }
          }
        ]
      });
    };

    $scope.modalMoveNote = function(notebookId, noteId) {

      if($rootScope.menuItemNoteClass('multiple') === 'disabled') {
        return false;
      }

      $rootScope.modalNotebookSelect({
        'notebookId':  notebookId,
        'noteId':      noteId,
        'theCallback': function(notebookId, noteId, toNotebookId) {
          if($rootScope.editMultipleNotes) {
            noteId = [];
            angular.forEach($rootScope.notesSelectedIds, function(isChecked, checkedNoteId) {
              if(isChecked) {
                noteId.push(checkedNoteId);
              }
            });
          }
          NotesService.moveNote(notebookId, noteId, toNotebookId, function(_notebookId, _noteId, _toNotebookId) {
            $('#modalNotebookSelect').modal('hide');
            $location.path("/n/" + (_toNotebookId));
          });
          return true;
        },
        'header':      $rootScope.i18n.keywords.select_notebook_title,
        'description': $rootScope.i18n.notebooks.move_note_description
      });
    };

    $scope.modalShareNote = function(notebookId,noteId){
      if($rootScope.menuItemNoteClass('multiple') === 'disabled') {
        return false;
      }
      $scope.getUsers(noteId,function(noteId){
        if (!$scope.can_share) {
          $rootScope.messageBox({
        'title':   $rootScope.i18n.keywords.cannot_share_title,
        'content':  $rootScope.i18n.keywords.cannot_share_message,
        'buttons': [
          {
            // We don't need an id for the dismiss button.
            // 'id': 'button-no',
            'label':     $rootScope.i18n.keywords.close,
            'isDismiss': true
          }]});
          return false;
        }
        console.log(noteId);
        $rootScope.modalUsersSelect({
          'notebookId': notebookId,
          'noteId': noteId,
          'theCallback':function(notebookId,noteId,toUsers){
            if ($rootScope.editMultipleNotes) {
              noteId=[];
              console.log($rootScope.notesSelectedIds);
              angular.forEach($rootScope.notesSelectedIds, function(isChecked, checkedNoteId) {
                console.log(checkedNoteId);
                if(isChecked) {
                  noteId.push(checkedNoteId);
                }
              });
            }
            toUserId=[]
            toUMASK=[]
            angular.forEach(toUsers, function(user,key){
                if (!user['is_current_user']) {
                  toUserId.push(user['id']);
                  toUMASK.push(user['umask']);
                }
              });
            NotesService.shareNote(notebookId,noteId,toUserId, toUMASK, function(_notebookId,_noteId){
              $('#modalUsersSelect').modal('hide');
              $location.path("/n/"+(_notebookId));
            });
            return true;
          }
        });
      });
    };
    
    $scope.modalUsersSelectSubmit = function(notebookId, noteId, toUserId) {
      console.log(toUserId);
      $rootScope.modalMessageBox.theCallback(notebookId, noteId, toUserId);
    };
    
    $scope.modalUsersSelectInherit = function(notebookId){
      NetService.apiGet('/users/notebooks/'+notebookId, function(status, data) {
        if(status == 200) {
          $rootScope.users = data.response;
        }
      });
    }
    $scope.submitSearch = function() {
      if($scope.search == "") {
        $location.path("/");
      } else {
        $location.path("/s/" + encodeURIComponent($scope.search));
      }
    };

    $scope.onDragSuccess = function(data, event) {
      //u
    };

    $scope.openShare = function(){
      $rootScope.messageBox({
          'title': $rootScope.i18n.keywords.coming_soon,
          'content': $rootScope.i18n.keywords.not_implemented,
          'buttons': [
            {
              'class': 'btn-primary',
              'label': $rootScope.i18n.keywords.close,
              'isDismiss': true
            }
          ]
      });
    };

  }]);

angular.module('paperworkNotes')
  .directive('pwDatepickerRefresh', function() {
    var noop = function() {};
    var refresh = function(dpCtrl) {
      return function() {
        dpCtrl.refreshView();
      };
    };

    return {
      require: 'datepicker',
      link:    function(scope, elem, attrs, dpCtrl) {
        var refreshPromise = scope[attrs.pwDatepickerRefresh];
        refreshPromise.then(noop, noop, refresh(dpCtrl));
      }
    };
  });

angular.module('paperworkNotes').controller('VersionsController',
  ["$scope", "$rootScope", "$location", "$timeout", "$routeParams", function($scope, $rootScope, $location, $timeout, $routeParams) {
    // TODO
  }]);

angular.module('paperworkNotes').factory('VersionsService',
  ["$rootScope", "$http", "NetService", function($rootScope, $http, NetService) {
    var paperworkVersionsServiceFactory = {};

    paperworkVersionsServiceFactory.getVersionById = function(notebookId, noteId, versionId) {
      NetService.apiGet('/notebooks/' + notebookId + '/notes/' + noteId + '/versions/' + versionId, function(status, data) {
        if(status == 200) {
          $rootScope.version = data.response;
        }
      });
    };

    paperworkVersionsServiceFactory.getVersionAttachments = function(notebookId, noteId, versionId, callback) {
      NetService.apiGet('/notebooks/' + notebookId + '/notes/' + noteId + '/versions/' + versionId + '/attachments', function(status, data) {
        if(status == 200) {
          if(typeof callback != "undefined") {
            callback(data.response);
          }
        }
      });
    };

    return paperworkVersionsServiceFactory;
  }]);

angular.module('paperworkNotes').controller('ViewController',
  ["$scope", "$rootScope", "$location", "$routeParams", "NotesService", function($scope, $rootScope, $location, $routeParams, NotesService) {
    $scope.isVisible = function() {
      return !$rootScope.expandedNoteLayout;
    }
  }]);

angular.module('paperworkNotes').controller('WaybackController',
  ["$scope", "$rootScope", "$location", "$routeParams", "NetService", "NotesService", function($scope, $rootScope, $location, $routeParams, NetService, NotesService) {
    // FIXME
    $('#paperworkViewParent').off('picked.freqselector').on('picked.freqselector', function(e) {
      var itemId = $(e.item).data('itemid');

      NetService.apiGet('/notebooks/' + $rootScope.getNotebookSelectedId() + '/notes/' + ($rootScope.getNoteSelectedId(true)).noteId + '/versions/' + itemId,
        function(status, data) {
          if(status == 200) {
            $rootScope.note.version.title = data.response.title;
            $rootScope.note.version.content = data.response.content;
            if(data.response.next_id === null) {
              itemId = 0;
            }
            $rootScope.note.version_id = itemId;
          }
        });

      NotesService.getNoteVersionAttachments($rootScope.getNotebookSelectedId(), ($rootScope.getNoteSelectedId(true)).noteId, itemId, function(response) {
        $rootScope.fileList = response;
      });

    });
  }]);
